<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->

  <!-- With UseCommonOutputDirectory turned on, any copy-local projects/references break
       csproj's up-to-date check because they aren't copied to the output directory. 
       Turn it off. 
  -->

  <ItemDefinitionGroup Condition="'$(UseCommonOutputDirectory)' == 'true'">
    <Reference>
      <Private>false</Private>
    </Reference>

    <ProjectReference>
      <Private>false</Private>
    </ProjectReference>
  </ItemDefinitionGroup>

  <!-- This is a workaround for build failures in WPT branch, like:
       "Menus.vsct(18,11): error VSCT1118: File not found: Unable to locate 'stdidcmd.h' on the include paths provided"
  --> 
  <ItemGroup>
    <VSCTIncludePath Include="$(VSSDK150Install)\VisualStudioIntegration\Common\Inc" />
  </ItemGroup>

  <!--
    This is a workaround for allowing neutral CTO resource produced from *.vsct to go in the main assembly.

    We move the neutral *.cto file to be categorized as WithCulture=true,Culture=en to prevent the tools from falsely reporting:
      error VSSDK1006: Two CTO files have the same Menus.ctmenu resource name.

     Note that this categorization does not apply to the items that actually produce the .resources.dll and so it will
     not cause an English satellite to be generated.

     The documented way around this is to put all resources (including neutral/en) in satellites:
       https://msdn.microsoft.com/en-us/library/ee943168.aspx

       However, that has consequences we do not want:
        - It breaks resx code-gen to *.designer.cs
        - It causes extra dll loads in en case
        - If we ever split satellites in to language packs, there would be no english fallback.
  -->
  <Target Name="AssignEnCultureToNeutralCto" BeforeTargets="MergeCtoResource">
    <ItemGroup>
      <_GeneratedCTOFilesWithCulture Include="@(_GeneratedCTOFilesWithNoCulture)">
        <Culture>en</Culture>
        <WithCulture>true</WithCulture>
      </_GeneratedCTOFilesWithCulture>

      <_GeneratedCTOFilesWithNoCulture Remove="@(_GeneratedCTOFilesWithNoCulture)" />

      <_ResourcesToMergeWithCTOWithCultureMetadata Condition="'%(WithCulture)' != 'true'">
        <Culture>en</Culture>
        <WithCulture>true</WithCulture>
      </_ResourcesToMergeWithCTOWithCultureMetadata>
    </ItemGroup>
  </Target>

  <!-- This file is imported by all projects at the end of the project files -->
  <!-- Update common properties -->
  <PropertyGroup>
    <OutputPath>$(OutDir)</OutputPath>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'VB' AND '$(AssemblyName)' != ''">$(AssemblyName).xml</DocumentationFile>
    <DocumentationFile Condition="'$(DocumentationFile)' == '' AND '$(NoDocumentationFile)' != 'true' AND '$(Nonshipping)' != 'true' AND '$(ProjectLanguage)' == 'CSharp' AND '$(AssemblyName)' != ''">$(OutputPath)$(AssemblyName).xml</DocumentationFile>

    <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == '' AND '$(NonShipping)' == 'true'">$(VSLToolsPath)\Rulesets\NonShippingProjectRules.ruleset</CodeAnalysisRuleSet>
    <CodeAnalysisRuleSet Condition="'$(CodeAnalysisRuleSet)' == ''">$(VSLToolsPath)\Rulesets\Roslyn.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>

  <PropertyGroup>
    <!-- While UseCommonOutputDirectory will prevent NuGet implementations from being copied, 
         we still need to turn off CopyNuGetImplementations to prevent the build task from complaining about a 
         lack of a runtime section in our project.json. -->

    <CopyNuGetImplementations Condition="'$(UseCommonOutputDirectory)' == 'true'">false</CopyNuGetImplementations>
  </PropertyGroup>

  <!-- settings for strong name signing -->
  <PropertyGroup>
    <MicroBuildSigningLibraryV2>$(BUILD_ARTIFACTSTAGINGDIRECTORY)\MicroBuild\Plugins\MicroBuild.Plugins.Signing.1.0.227\build\MicroBuild.Signing.dll</MicroBuildSigningLibraryV2>
    <MicroBuildSigningLibrary Condition="Exists('$(MicroBuildSigningLibraryV2)')">$(MicroBuildSigningLibraryV2)</MicroBuildSigningLibrary>
    <StrongNameCertificate Condition="'$(StrongNameCertificate)' == ''">MicrosoftShared</StrongNameCertificate>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(SignAssembly)' == 'true'">
      <Choose>
        <!-- DelaySign if we're real signing, otherwise public sign -->
        <When Condition="'$(ShouldSignBuild)' == 'true'">
          <PropertyGroup>
            <DelaySign>true</DelaySign>
          </PropertyGroup>
        </When>
        <Otherwise>
          <PropertyGroup>
            <PublicSign>true</PublicSign>
          </PropertyGroup>
        </Otherwise>
      </Choose>

      <Choose>
        <When Condition="'$(StrongNameCertificate)' == 'Microsoft'">
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(VSLToolsPath)\Strong Name Keys\MSFT.snk</AssemblyOriginatorKeyFile>
            <PublicKey>002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293</PublicKey>
            <PublicKeyToken>b03f5f7f11d50a3a</PublicKeyToken>
            <StrongNameCertificateFriendlyId>67</StrongNameCertificateFriendlyId>
          </PropertyGroup>
        </When>
            
        <Otherwise>
          <PropertyGroup>
            <AssemblyOriginatorKeyFile>$(VSLToolsPath)\Strong Name Keys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
            <PublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</PublicKey>
            <PublicKeyToken>31BF3856AD364E35</PublicKeyToken>
            <StrongNameCertificateFriendlyId>72</StrongNameCertificateFriendlyId>
          </PropertyGroup>
        </Otherwise>

      </Choose>
    </When>
  </Choose>

  <!--
    Workaround https://github.com/Microsoft/msbuild/issues/1490 (lack of support for public-signing satellites) by 
    delay-signing satellite assemblies when main assembly is public-signed.
   -->
  <Target Name="PrepareToDelaySignSatelliteAssemblies" BeforeTargets="GenerateSatelliteAssemblies">
    <PropertyGroup>
      <_DelaySignMainAssembly>$(DelaySign)</_DelaySignMainAssembly>
      <DelaySign Condition="'$(PublicSign)' == 'true'">true</DelaySign>
    </PropertyGroup>
  </Target>
  <Target Name="CleanupAfterDelaySigningSatelliteAssemblies" AfterTargets="GenerateSatelliteAssemblies">
    <PropertyGroup>
      <DelaySign>$(_DelaySignMainAssembly)</DelaySign>
    </PropertyGroup>
  </Target>

<!-- Enable IOperation feature for IOperation based analyzers. --> 
  <Choose> 
    <When Condition="$(Features) == ''"> 
      <PropertyGroup> 
        <Features>IOperation</Features> 
      </PropertyGroup> 
    </When> 
    <Otherwise> 
      <PropertyGroup> 
        <Features>IOperation,$(Features)</Features> 
  </PropertyGroup> 
    </Otherwise> 
  </Choose> 

  <!-- Because https://github.com/dotnet/roslyn/issues/7812 is not yet fixed, the IDE doesn't know if we set the PublicSign
       flag. As a result, all design-time builds will thing we're real-signing, which causes semantics to get all screwed up.
       The workaround for now is, for design-time builds only, to pass the DelaySign flag since that's "good enough". This
       must be done in a target versus conditioning on BuildingProject, since BuildingProject itself is correctly set in a
       target. -->
  <Target Name="FixPublicSignFlagForDesignTimeBuilds" BeforeTargets="CoreCompile" Condition="'$(PublicSign)' == 'true'">
    <PropertyGroup Condition="'$(BuildingProject)' == 'false'">
      <!-- Turn off PublicSign, because leaving both to true will make the Csc task unhappy -->
      <PublicSign>false</PublicSign>
      <DelaySign>true</DelaySign>
    </PropertyGroup>
  </Target>

  <!-- Project language. This is needed to get xaml files to compile correctly. For some reason the ProjectLanguage is not
       set and some of the tasks will fail
  -->
  <PropertyGroup Condition="'$(ProjectLanguage)' == ''">
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.csproj' OR '$(Language)' == 'C#'">CSharp</ProjectLanguage>
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.vbproj' OR '$(Language)' == 'VB'">VB</ProjectLanguage>
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.vcxproj' OR '$(Language)' == 'C++'">C++</ProjectLanguage>
  </PropertyGroup>

  <!-- VSIX projects generate a temp project file which doesnt have any extension and needs to be built as C# projects. The .NET SDK
       just imporrts Microsoft.Common.CurrentVersion.targets. So set LanguageTargets to import CSharp.targets if the 
       extension is unknown -->
  <PropertyGroup Condition="'$(LanguageTargets)' == ''">
    <LanguageTargets Condition="'$(MSBuildProjectExtension)' == '.csproj' OR '$(Language)' == 'C#'">$(MSBuildToolsPath)\Microsoft.CSharp.targets</LanguageTargets>
    <LanguageTargets Condition="'$(MSBuildProjectExtension)' == '.vbproj' OR '$(Language)' == 'VB'">$(MSBuildToolsPath)\Microsoft.VisualBasic.targets</LanguageTargets>
    <LanguageTargets Condition="'$(LanguageTargets)' == ''">$(MSBuildToolsPath)\Microsoft.CSharp.targets</LanguageTargets> 
  </PropertyGroup>

  <Import Project="References.targets" />
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <!-- On Mono on *nix the NuGet targets aren't imported by default, so we do that here -->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\NuGet\Microsoft.NuGet.targets"
          Condition="'$(OS)' != 'Windows_NT'" />

  <Choose>
    <When Condition="'$(TargetFrameworkIdentifier)' == '.NETPortable' AND
                     '$(TargetFrameworkVersion)' == 'v5.0'">
      <!-- Treat portable exes as CoreClr-targeting-exes -->
      <PropertyGroup Condition="'$(OutputType)' == 'Exe'">
        <NuGetTargetMoniker>DNXCore,Version=v5.0</NuGetTargetMoniker>
        <BaseNuGetRuntimeIdentifier Condition="'$(OS)' == 'Windows_NT'">win7</BaseNuGetRuntimeIdentifier>
      </PropertyGroup>

      <!-- Upgrade portable projects to .NETStandard 1.3 -->
      <PropertyGroup Condition="'$(OutputType)' == 'Library'">
        <NuGetTargetMoniker>.NETStandard,Version=v1.3</NuGetTargetMoniker>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- It looks like MSBuild has a bug on *nix where they aggressively
       directory separators from '\' to '/', even when the '\'
       is being used as an escape character in a define constant in VB.
       This change works around the bug by removing all quotes from
       define constants after Microsoft.VisualBasic.CurrentVersion adds
       them in our build. This should be OK since none of our constants
       should require quoting. See https://github.com/Microsoft/msbuild/issues/137 -->
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <FinalDefineConstants>$(FinalDefineConstants.Replace('"', ''))</FinalDefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOn>
      $(BuildDependsOn);
      CopyCppOutputBackToIntDir;
    </BuildDependsOn>
  </PropertyGroup>

  <!-- A task for C++ projects to copy their output back under obj\Debug or the like. This is slightly hacky. -->
  <Target
    Name="CopyCppOutputBackToIntDir" Condition="'$(ProjectLanguage)' == 'C++'">

    <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(IntDir)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="$(OutDir)$(TargetName).pdb" DestinationFolder="$(IntDir)" SkipUnchangedFiles="true" Condition="Exists('$(OutDir)$(TargetName).pdb')" />
  </Target>

  <!-- Verify some build flags are correct -->
  <PropertyGroup>
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);VerifyBuildFlags</PrepareForBuildDependsOn>
  </PropertyGroup>

  <Target Name="VerifyBuildFlags">
    <Error
        Condition="('$(RealSignBuild)' == 'true' OR '$(SignType)' == 'real') AND '$(BuildVersion)' == '42.42.42.42'"
        Text="Must specify a build version in order to real sign a build." />

    <Error
        Condition="'$(RemoveIntegerChecks)' != ''"
        Text="The following properties cannot be set by individual projects: RemoveIntegerChecks" />

    <PropertyGroup Condition="'$(ProjectLanguage)' == 'VB'">
      <RemoveIntegerChecks>true</RemoveIntegerChecks>
    </PropertyGroup>
  </Target>

  <!-- ====================================================================================

         Support for a IncludeInVSIXLocalOnly Content metadata

       ==================================================================================== -->

  <PropertyGroup>
    <GetVsixSourceItemsDependsOn>$(GetVsixSourceItemsDependsOn);IncludeVsixLocalOnlyItems</GetVsixSourceItemsDependsOn>
  </PropertyGroup>

  <Target Name="IncludeVsixLocalOnlyItems">
    <!-- This is shamelessly ripped from Microsoft.VsSDK.targets -->
    <ItemGroup>
      <VSIXSourceItemLocalOnly Include="@(Content)" Condition="'%(Content.IncludeInVSIXLocalOnly)'=='true' AND '%(Content.VSIXSubPath)'==''">
        <!-- Sets VSIXSubPath for content items that are nonlinked files -->
        <VSIXSubPath Condition="'%(Content.Link)'==''">%(Content.RelativeDir)</VSIXSubPath>
        <!-- Sets VSIXSubPath for content items that are linked files -->
        <VSIXSubPath Condition="'%(Content.Link)'!=''">$([System.IO.Path]::GetDirectoryName(%(Content.Link)))</VSIXSubPath>
      </VSIXSourceItemLocalOnly>

      <VSIXSourceItemLocalOnly Include="@(Content)" Condition="'%(Content.IncludeInVSIXLocalOnly)'=='true' AND '%(Content.VSIXSubPath)'!=''" />
    </ItemGroup>
  </Target>

  <!-- ====================================================================================

         Include some of our NuGet-consumed assets into VSIX projects

         This exists for two reasons:

         1) In some cases, we need to include the contents of a NuGet package that is otherwise
            contained within the SuppressFromVsix list, because we're actually the component
            inside Visual Studio that ships that component
         
         2) The SDK targets don't currently look at the ReferenceCopyLocalPaths produced
            by the NuGet build task.

       ==================================================================================== -->

  <PropertyGroup>
    <GetVsixSourceItemsDependsOn>$(GetVsixSourceItemsDependsOn);IncludeNuGetResolvedAssets</GetVsixSourceItemsDependsOn>
  </PropertyGroup>

  <Target Name="IncludeNuGetResolvedAssets" DependsOnTargets="ResolveNuGetPackageAssets" Condition="'@(NuGetPackageToIncludeInVsix)' != ''">
    <ItemGroup>
      <_ReferenceCopyLocalPathsWithPotentialInclusions Include="@(ReferenceCopyLocalPaths)">
        <NuGetPackageToIncludeInVsix>%(NuGetPackageToIncludeInVsix.Identity)</NuGetPackageToIncludeInVsix>
      </_ReferenceCopyLocalPathsWithPotentialInclusions>

      <VSIXCopyLocalReferenceSourceItem Include="@(_ReferenceCopyLocalPathsWithPotentialInclusions)"
        Condition="'%(_ReferenceCopyLocalPathsWithPotentialInclusions.NuGetPackageId)' == '%(_ReferenceCopyLocalPathsWithPotentialInclusions.NuGetPackageToIncludeInVsix)' and
                   '%(_ReferenceCopyLocalPathsWithPotentialInclusions.Extension)' != '.pdb'">
        <ForceIncludeInVsix>true</ForceIncludeInVsix>
        <Private>true</Private>
      </VSIXCopyLocalReferenceSourceItem>
    </ItemGroup>
  </Target>

  <ItemDefinitionGroup>
    <NuGetPackageToIncludeInVsix>
      <Visible>false</Visible>
    </NuGetPackageToIncludeInVsix>
  </ItemDefinitionGroup>

  <!-- This is a copy of the Microsoft.VisualStudio.SDK.EmbedInteropTypes NuGet package, but only the list of
       assemblies that we need. The package includes things like EnvDTE which are reasonable for consumers, but
       strange since we actually _implement_ DTE and use it as an exchange type with generics in a few places. -->
  <Target Name="LinkVSSDKEmbeddableAssemblies" BeforeTargets="FindReferenceAssembliesForReferences;ResolveReferences">
    <ItemGroup>
      <ReferencePath Condition="
              '%(FileName)' == 'Microsoft.VisualStudio.Shell.Embeddable'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.0'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.12.1.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.Shell.Interop.15.0.DesignTime'
           or '%(Filename)' == 'Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.TextManager.Interop.12.1.DesignTime'
           or '%(FileName)' == 'Microsoft.VisualStudio.ProjectSystem.Interop'
           or '%(FileName)' == 'stdole'
           or '%(FileName)' == 'Microsoft.VisualStudio.CommandBars'
           or '%(FileName)' == 'NuGet.SolutionRestoreManager.Interop'
           or '%(FileName)' == 'NuGet.VisualStudio'
           or '%(FileName)' == 'VSLangProj110'
              ">
        <EmbedInteropTypes>true</EmbedInteropTypes>
      </ReferencePath>
    </ItemGroup>
  </Target>

  <!-- ====================================================================================

         Generation of AssemblyVersion attributes from the BuildVersion property

       ==================================================================================== -->

  <Import Project="GenerateAssemblyInfo.targets" Condition="'$(ProjectLanguage)' == 'CSharp' OR '$(ProjectLanguage)' == 'VB'" />
  <Import Project="GenerateVersionInfoResourceFile.targets" Condition="'$(ProjectLanguage)' == 'C++'" />

  <!-- ====================================================================================

         Generation of InternalsVisibleTo attributes from the project

       ==================================================================================== -->

  <Import Project="GenerateInternalsVisibleTo.targets" />

  <!-- ====================================================================================

         VSSDK

       ==================================================================================== -->

  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(ImportVSSDKTargets)' == 'true' And Exists('$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets')" /> 

  <!-- The VSSDK immplements some targets which are run during design time builds per convention. 
       If the Project is not a VSIX project and sets $CreateVSIXContainer=false these targets should be 
       a no-op. However they dont check for that and that's a bug. To workaround, we override them
       with empty targets and conditionally import these if CreateVSIXContainer is false.
       Tracked by https://devdiv.visualstudio.com/DevDiv/_workitems?id=365685&fullScreen=false&_a=edit   -->
  <Import Project="VSSDKDesignTimeBuildWorkaround.targets" Condition="'$(CreateVsixContainer)'=='false'" />
  
  <!-- ====================================================================================

         Support for in-place modification of the compiled binary.
         Since there may be more than one post compile modification, we must take care not
         to break incremental builds. A timestemp file is written out when all modification
         targets have completed.
         Note that the targets participating in post compile modification must list the
         sentinel file as one of their outputs, but they should not modify it.

       ==================================================================================== -->

  <PropertyGroup>
    <PostCompileBinaryModificationSentinelFile>$(IntermediateOutputPath)$(TargetFileName).pcbm</PostCompileBinaryModificationSentinelFile>
  </PropertyGroup>

  <Target Name="PostCompileBinaryModification"
          AfterTargets="CoreCompile"
          DependsOnTargets="ApplyOptimizations"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">

    <!-- Write out a sentinel timestamp file to prevent unnecessary work in incremental builds. -->
    <Touch AlwaysCreate="true" Files="$(PostCompileBinaryModificationSentinelFile)" />

    <ItemGroup>
      <FileWrites Include="$(PostCompileBinaryModificationSentinelFile)" />
    </ItemGroup>
  </Target>

  <!-- ====================================================================================

         Support for rolling optimization data into assemblies.

       ==================================================================================== -->

  <PropertyGroup>
    <OptimizationDataFolderPath>$(NuGetPackageRoot)\RoslynDependencies.OptimizationData\$(RoslynDependenciesOptimizationDataVersion)\content\OptimizationData</OptimizationDataFolderPath>
    <OptimizationDataFile>$([System.IO.Path]::GetFullPath('$(OptimizationDataFolderPath)\$(TargetName).pgo'))</OptimizationDataFile>
    <IbcMergePath>$(NuGetPackageRoot)\Microsoft.DotNet.IBCMerge\$(MicrosoftDotNetIBCMergeVersion)\lib\net45\ibcmerge.exe</IbcMergePath>
  </PropertyGroup>

  <Target Name="ApplyOptimizations"
          Condition="'$(Configuration)' == 'Release' AND '$(NonShipping)' != 'true' AND '$(ShouldSignBuild)' == 'true' AND Exists('$(OptimizationDataFile)')"
          Inputs="@(IntermediateAssembly)"
          Outputs="@(IntermediateAssembly);$(PostCompileBinaryModificationSentinelFile)">
    <Message Text="Adding optimization data to @(IntermediateAssembly)" />

    <Error Text="IBCMerge not found at $(IbcMergePath). Local developer builds should pass /p:SkipApplyOptimizations=true to avoid this"
             Condition="!Exists('$(IbcMergePath)')" />
    <Exec Command="&quot;$(IbcMergePath)&quot; -q -f -partialNGEN -minify -mo &quot;@(IntermediateAssembly)&quot; -incremental &quot;$(OptimizationDataFile)&quot;"
            ConsoleToMSBuild="true"
            Condition="Exists('$(IbcMergePath)')">
      <Output TaskParameter="ConsoleOutput" PropertyName="IbcMergeOutput" />
    </Exec>

    <Message Text="$(IbcMergeOutput)" />
  </Target>

  <!-- ====================================================================================

         Support for signing

       ==================================================================================== -->
  <ItemGroup>
    <FilesToSign Condition="'$(ShouldSignBuild)' == 'true' AND '$(NonShipping)' != 'true' AND '$(ProjectSystemLayer)' != 'Dependency'" Include="$(OutDir)\$(AssemblyName).dll">
        <Authenticode>Microsoft</Authenticode>
        <StrongName>$(StrongNameCertificateFriendlyId)</StrongName>
    </FilesToSign>
  </ItemGroup>

  <ItemGroup>
    <FilesToSign Condition="'$(ShouldSignBuild)' == 'true' AND '$(ProducingSignedVsix)' == 'true'" Include="$(TargetVsixContainer)">
        <Authenticode>VsixSHA2</Authenticode>
    </FilesToSign>
  </ItemGroup>

  <Target Name="IncludeResourcesDllForSigning" AfterTargets="CopyFilesToOutputDirectory"> 
    <ItemGroup> 
      <!-- Handle the resources dll if there are any --> 
      <FilesToSign Condition="'$(ShouldSignBuild)' == 'true' AND '$(NonShipping)' != 'true' AND '$(ProjectSystemLayer)' != 'Dependency'" Include="$(OutDir)\**\$(AssemblyName).resources.dll"> 
          <Authenticode>Microsoft</Authenticode> 
          <StrongName>$(StrongNameCertificateFriendlyId)</StrongName> 
      </FilesToSign> 
    </ItemGroup> 
  </Target>

  <!-- This target is similar to SatelliteDllsProjectOutputGroup except it includes path from the final output path rather than intermediate output path -->
  <Target Name="SatelliteDllsProjectOutputGroupWithFinalOutputPath" 
        Returns="@(SatelliteDllsProjectOutputGroupWithFinalOutputPathOutput)" 
        DependsOnTargets="$(SatelliteDllsProjectOutputGroupDependsOn)"> 

    <ItemGroup> 
      <SatelliteDllsProjectOutputGroupWithFinalOutputPathItem Include="$(OutputPath)%(EmbeddedResource.Culture)\$(TargetName).resources.dll" 
                                                         Condition="'%(WithCulture)' == 'true'"> 
        <TargetPath>%(EmbeddedResource.Culture)\$(TargetName).resources.dll</TargetPath> 
      </SatelliteDllsProjectOutputGroupWithFinalOutputPathItem> 
    </ItemGroup> 

    <!-- Convert intermediate items into final items; this way we can get the full path for each item. --> 
    <ItemGroup> 
      <SatelliteDllsProjectOutputGroupWithFinalOutputPathOutput Include="@(SatelliteDllsProjectOutputGroupWithFinalOutputPathItem->'%(FullPath)')"> 
        <OriginalItemSpec>%(SatelliteDllsProjectOutputGroupWithFinalOutputPathItem.Identity)</OriginalItemSpec> 
      </SatelliteDllsProjectOutputGroupWithFinalOutputPathOutput> 
    </ItemGroup> 
  </Target> 

  <!-- ====================================================================================

  Copying vsixmanifest to a separate folder

  ==================================================================================== -->

  <Target Name="CopyAdditionalFilesToOutputDirectory" AfterTargets="CopyFilesToOutputDirectory">

    <!-- Copy manifests to be picked up by NuGet insertion packages -->
    <Copy SourceFiles="source.extension.vsixmanifest" 
          DestinationFolder="$(OutDir)\Manifests\$(MSBuildProjectName)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          Condition="'$(CreateVsixContainer)' == 'true'"
          >
      
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <ItemGroup>
       <_XamlPropertyRuleToCopy Include="@(XamlPropertyRule);@(XamlPropertyRuleNoCodeBehind);@(XamlPropertyProjectItemsSchema)" />

       <!-- Pick up localized copies as well -->
       <_XamlPropertyRuleToCopy Include="%(RootDir)%(Directory)**\%(Filename)%(Extension)" />
    </ItemGroup>

    <!-- Copy rule files for testing and setup authoring purposes -->
    <Copy SourceFiles="@(_XamlPropertyRuleToCopy)"
          DestinationFiles="@(_XamlPropertyRuleToCopy->'$(OutDir)\Rules\%(RecursiveDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          >
      
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>      
    </Copy>
    
  </Target>
</Project>
